dev.off()
write.csv(R_estimate$R, paste(estadoTxt,"-R Estimate",".csv",sep=""))
}
print(R_estimate$R)
result <-1
return(result)
}
#######################################
#Deaths
#######################################
generateCSVandPlotForConfimedDeaths <- function(confirmedDeathsDataFrame , estadoTxt,aretirar,  daysToAverage,saveToFile,pathToSave){
# confirmedDeathsDataFrame[,"DIASPARALADEFUNCION"] <-as.numeric(as.Date(confirmedDeathsDataFrame[,"FECHA_DEF"])  - as.Date(confirmedDeathsDataFrame[,"FECHA_INGRESO"]))
#aggregate
aggregateDeaths <- aggregate(formula = RESULTADO ~ FECHA_DEF,FUN = sum, data =confirmedDeathsDataFrame  )
#	survivalGroups  <- aggregate(formula = RESULTADO ~ DIASPARALADEFUNCION,FUN = sum, data =confirmedDeathsDataFrame  )
#add running sum
aggregateDeaths[,"RESULTADO_ACUM"]   <- cumsum(aggregateDeaths$RESULTADO)
aggregateDeaths[,"RESULTADO7D"]      <- promedioxdias(aggregateDeaths, daysToAverage ,"RESULTADO")
aggregateDeaths[,"RESULTADO_ACUM7D"] <- promedioxdias(aggregateDeaths, daysToAverage ,"RESULTADO_ACUM")
#	 plot
if (saveToFile == TRUE) {
#save
# 1. Open png file
setwd(pathToSave)
png(paste(estadoTxt,"-Deaths" ,".png",sep=""), width = 800, height = 600)
# 2. Create the plot
}
barplot( head(aggregateDeaths$RESULTADO,-aretirar),names.arg=head(aggregateDeaths$FECHA_DEF,-aretirar),main=paste("Deaths",estadoTxt))
if (saveToFile == TRUE) {
# 3. Close the file
dev.off()
write.csv(aggregateDeaths, paste(estadoTxt,"-Deaths",".csv",sep=""))
}
if (saveToFile == TRUE) {
#save
# 1. Open png file
setwd(pathToSave)
png(paste(estadoTxt,"-Survival" ,".png",sep=""), width = 800, height = 600)
}
#survivalGroupsPlot<-hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,100),breaks=20,col="Gray")
#survivalGroups<-cbind(survivalGroupsPlot$breaks,survivalGroupsPlot$counts)
if (saveToFile == TRUE) {
# 3. Close the file
dev.off()
#write.csv(survivalGroups, paste(estadoTxt,"-Survival",".csv",sep=""))
}
#print(aggregateDeaths)
#print(survivalGroups)
result <-1
return(result)
}
#######################################
# Start here
#######################################
#download and load into dataframe
setwd(mydir)
if (FALSE) {
download.file(myurl, myfile )
unzipfile <- unzip (myfile, list = TRUE)
unzip (myfile, unzipfile$Name)
confirmedCasesDataFrame <- read.csv ( file=unzipfile$Name)
} else {
confirmedCasesDataFrame <- read.csv ("/media/joaquin/Nuevo_vol/misdoc/Mios2020/covid19/FechaIngreso-crecimientodiario/backup/200712COVID19MEXICO.csv")
}
#fill state names
listaEstados <- c(1:32)
nombreEstados <-c ("AGUASCALIENTES","BAJA_CALIFORNIA","BAJA_CALIFORNIA_SUR","CAMPECHE",	"COAHUILA",	"COLIMA","CHIAPAS",	"CHIHUAHUA","CDMX",	"DURANGO","GUANAJUATO",	"GUERRERO",	"HIDALGO","JALISCO","ESTADO_DE_MEXICO","MICHOACAN","MORELOS","NAYARIT","NUEVO_LEON","OAXACA","PUEBLA","QUERETARO","QUINTANA_ROO","SAN_LUIS_POTOSI","SINALOA","SONORA","TABASCO","TAMAULIPAS","TLAXCALA","VERACRUZ","YUCATAN","ZACATECAS")
poblacionEstados <-c(1184996,3155070,637026,822441,2748391,650555,4796580,3406465,8851080,1632934,5486372,3388768,2665018,7350682,15175862,4351037,1777227,1084979,4653458,3801962,5779829,1827937,1325578,2585518,2767761,2662480,2238603,3268554,1169936,7643194,1955577,1490668)
#Script which calculates the
#a)Moving Average CSV and Plot Generation for confirmed covid cases in Mexico by detection Date (FECHA_INGRESO)
#  Considering confirmed New cases and accumulated , using an average of x days and cutting off 7 days due of incomplete data
#  giving a CSV as a result
#  , "","FECHA_INGRESO","RESULTADO","RESULTADO_ACUM","RESULTADO7D","RESULTADO_ACUM7D"
# Gets data from
#http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
remove(list = ls())
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
#Omited for 3.6
#install.packages("Rcurl")
#install.packages("ggplot2")
#library("RCurl")
#library(ggplot2)
library(devtools)
library(EpiEstim)
mydir <-  '/media/joaquin/Nuevo_vol/misdoc/Mios2020/covid19/FechaIngreso-crecimientodiario'
myurl <-  'http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip'
myfile <- 'datos_abiertos_covid19.zip'
resultadoConfirmado  = 1
daysForGraphToCutOff = 7
movingAverageDays = 7
sinDefuncion = '9999-99-99'
##############################################
#calculate the average of last x days for a specific column on a data frame and returns a df
##############################################
promedioxdias <- function(casospromDF,  dias, nombreColumna){
#fill vector with zeroes
promedios<- rep(0, length(casospromDF[,1]))
#we are going to calculate starting at dias  position, to correcly calculate the average
observaciones <-  c((dias+1):length (casospromDF[,1]) )
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, nombreColumna] + suma
}
prom <-  suma / dias
promedios[i] = prom
}
return(promedios)
}
##############################################
#Moving Average CSV and Plot Generation,
#Confirmed New cases and accumulated , using an average of x days and remove some days due of incomplete data
##############################################
generateCSVandPlotForConfirmedCasesMovingAverage <- function(casesDataFrame , estadoTxt,aretirar, daysToAverage, saveToFile,pathToSave,fileNameTxtIdent){
aggregateCasesDataFrame <- aggregate(formula = RESULTADO ~ FECHA_INGRESO,FUN = sum, data = casesDataFrame)
#add running sum
aggregateCasesDataFrame[,"RESULTADO_ACUM"]   <- cumsum(aggregateCasesDataFrame$RESULTADO)
aggregateCasesDataFrame[,"RESULTADO7D"]      <- promedioxdias(aggregateCasesDataFrame, daysToAverage ,"RESULTADO")
aggregateCasesDataFrame[,"RESULTADO_ACUM7D"] <- promedioxdias(aggregateCasesDataFrame, daysToAverage ,"RESULTADO_ACUM")
# Generate Plots and save files
setwd(pathToSave)
if (saveToFile == TRUE) {
# Open png file
png(paste(estadoTxt, "-Acumvscurrent",fileNameTxtIdent ,".png", sep=""), width = 800, height = 600)
}
# Create the plot
plot(x = head(aggregateCasesDataFrame$RESULTADO_ACUM7D,-aretirar), y = head(aggregateCasesDataFrame$RESULTADO7D,-aretirar) ,xlab = paste("Acumulados Confirmados promedio ", aretirar," dias"), ylab="Nuevos",main=estadoTxt, log="xy")
with (aggregateCasesDataFrame, lines(x = head( aggregateCasesDataFrame$RESULTADO_ACUM7D,-aretirar), y = head(aggregateCasesDataFrame$RESULTADO7D, -aretirar),col="red"))
if (saveToFile == TRUE) {
dev.off()
write.csv(aggregateCasesDataFrame,paste(estadoTxt,fileNameTxtIdent,".csv", sep=""))
#EpidemicCurve Name
png(paste(estadoTxt, "-Casos",fileNameTxtIdent ,".png", sep=""), width = 800, height = 600)
}
#Create the plot
barplot( head(aggregateCasesDataFrame$RESULTADO,-aretirar),names.arg=head(aggregateCasesDataFrame$FECHA_INGRESO,-aretirar),main=paste("Nuevos Ingresos",estadoTxt))
if (saveToFile == TRUE) {
# Close the file
dev.off()
}
#######################
#Restimate
######################
R_estimate <- estimate_R(head(aggregateCasesDataFrame$RESULTADO,-aretirar) ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
#	 plot
if (saveToFile == TRUE) {
setwd(pathToSave)
png(paste(estadoTxt,"-R Estimate", ".png",sep=""), width = 800, height = 600)
}
plot(R_estimate,  options_R = list( xlab ="Tiempo", ylab = "R"))
if (saveToFile == TRUE) {
dev.off()
write.csv(R_estimate$R, paste(estadoTxt,"-R Estimate",".csv",sep=""))
}
print(R_estimate$R)
result <-1
return(result)
}
#######################################
#Deaths
#######################################
generateCSVandPlotForConfimedDeaths <- function(confirmedDeathsDataFrame , estadoTxt,aretirar,  daysToAverage,saveToFile,pathToSave){
# confirmedDeathsDataFrame[,"DIASPARALADEFUNCION"] <-as.numeric(as.Date(confirmedDeathsDataFrame[,"FECHA_DEF"])  - as.Date(confirmedDeathsDataFrame[,"FECHA_INGRESO"]))
#aggregate
aggregateDeaths <- aggregate(formula = RESULTADO ~ FECHA_DEF,FUN = sum, data =confirmedDeathsDataFrame  )
#	survivalGroups  <- aggregate(formula = RESULTADO ~ DIASPARALADEFUNCION,FUN = sum, data =confirmedDeathsDataFrame  )
#add running sum
aggregateDeaths[,"RESULTADO_ACUM"]   <- cumsum(aggregateDeaths$RESULTADO)
aggregateDeaths[,"RESULTADO7D"]      <- promedioxdias(aggregateDeaths, daysToAverage ,"RESULTADO")
aggregateDeaths[,"RESULTADO_ACUM7D"] <- promedioxdias(aggregateDeaths, daysToAverage ,"RESULTADO_ACUM")
#	 plot
if (saveToFile == TRUE) {
#save
# 1. Open png file
setwd(pathToSave)
png(paste(estadoTxt,"-Deaths" ,".png",sep=""), width = 800, height = 600)
# 2. Create the plot
}
barplot( head(aggregateDeaths$RESULTADO,-aretirar),names.arg=head(aggregateDeaths$FECHA_DEF,-aretirar),main=paste("Deaths",estadoTxt))
if (saveToFile == TRUE) {
# 3. Close the file
dev.off()
write.csv(aggregateDeaths, paste(estadoTxt,"-Deaths",".csv",sep=""))
}
if (saveToFile == TRUE) {
#save
# 1. Open png file
setwd(pathToSave)
png(paste(estadoTxt,"-Survival" ,".png",sep=""), width = 800, height = 600)
}
#survivalGroupsPlot<-hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,100),breaks=20,col="Gray")
#survivalGroups<-cbind(survivalGroupsPlot$breaks,survivalGroupsPlot$counts)
if (saveToFile == TRUE) {
# 3. Close the file
dev.off()
#write.csv(survivalGroups, paste(estadoTxt,"-Survival",".csv",sep=""))
}
#print(aggregateDeaths)
#print(survivalGroups)
result <-1
return(result)
}
#######################################
# Start here
#######################################
#download and load into dataframe
setwd(mydir)
if (FALSE) {
download.file(myurl, myfile )
unzipfile <- unzip (myfile, list = TRUE)
unzip (myfile, unzipfile$Name)
confirmedCasesDataFrame <- read.csv ( file=unzipfile$Name)
} else {
confirmedCasesDataFrame <- read.csv ("/media/joaquin/Nuevo_vol/misdoc/Mios2020/covid19/FechaIngreso-crecimientodiario/backup/200712COVID19MEXICO.csv")
}
#fill state names
listaEstados <- c(1:32)
nombreEstados <-c ("AGUASCALIENTES","BAJA_CALIFORNIA","BAJA_CALIFORNIA_SUR","CAMPECHE",	"COAHUILA",	"COLIMA","CHIAPAS",	"CHIHUAHUA","CDMX",	"DURANGO","GUANAJUATO",	"GUERRERO",	"HIDALGO","JALISCO","ESTADO_DE_MEXICO","MICHOACAN","MORELOS","NAYARIT","NUEVO_LEON","OAXACA","PUEBLA","QUERETARO","QUINTANA_ROO","SAN_LUIS_POTOSI","SINALOA","SONORA","TABASCO","TAMAULIPAS","TLAXCALA","VERACRUZ","YUCATAN","ZACATECAS")
poblacionEstados <-c(1184996,3155070,637026,822441,2748391,650555,4796580,3406465,8851080,1632934,5486372,3388768,2665018,7350682,15175862,4351037,1777227,1084979,4653458,3801962,5779829,1827937,1325578,2585518,2767761,2662480,2238603,3268554,1169936,7643194,1955577,1490668)
#Script which calculates the
#a)Moving Average CSV and Plot Generation for confirmed covid cases in Mexico by detection Date (FECHA_INGRESO)
#  Considering confirmed New cases and accumulated , using an average of x days and cutting off 7 days due of incomplete data
#  giving a CSV as a result
#  , "","FECHA_INGRESO","RESULTADO","RESULTADO_ACUM","RESULTADO7D","RESULTADO_ACUM7D"
# Gets data from
#http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
remove(list = ls())
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
#Omited for 3.6
#install.packages("Rcurl")
#install.packages("ggplot2")
#library("RCurl")
#library(ggplot2)
library(devtools)
library(EpiEstim)
mydir <-  '/media/joaquin/Nuevo_vol/misdoc/Mios2020/covid19/FechaIngreso-crecimientodiario'
myurl <-  'http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip'
myfile <- 'datos_abiertos_covid19.zip'
resultadoConfirmado  = 1
daysForGraphToCutOff = 7
movingAverageDays = 7
sinDefuncion = '9999-99-99'
##############################################
#calculate the average of last x days for a specific column on a data frame and returns a df
##############################################
promedioxdias <- function(casospromDF,  dias, nombreColumna){
#fill vector with zeroes
promedios<- rep(0, length(casospromDF[,1]))
#we are going to calculate starting at dias  position, to correcly calculate the average
observaciones <-  c((dias+1):length (casospromDF[,1]) )
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, nombreColumna] + suma
}
prom <-  suma / dias
promedios[i] = prom
}
return(promedios)
}
##############################################
#Moving Average CSV and Plot Generation,
#Confirmed New cases and accumulated , using an average of x days and remove some days due of incomplete data
##############################################
generateCSVandPlotForConfirmedCasesMovingAverage <- function(casesDataFrame , estadoTxt,aretirar, daysToAverage, saveToFile,pathToSave,fileNameTxtIdent){
aggregateCasesDataFrame <- aggregate(formula = RESULTADO ~ FECHA_INGRESO,FUN = sum, data = casesDataFrame)
#add running sum
aggregateCasesDataFrame[,"RESULTADO_ACUM"]   <- cumsum(aggregateCasesDataFrame$RESULTADO)
aggregateCasesDataFrame[,"RESULTADO7D"]      <- promedioxdias(aggregateCasesDataFrame, daysToAverage ,"RESULTADO")
aggregateCasesDataFrame[,"RESULTADO_ACUM7D"] <- promedioxdias(aggregateCasesDataFrame, daysToAverage ,"RESULTADO_ACUM")
# Generate Plots and save files
setwd(pathToSave)
if (saveToFile == TRUE) {
# Open png file
png(paste(estadoTxt, "-Acumvscurrent",fileNameTxtIdent ,".png", sep=""), width = 800, height = 600)
}
# Create the plot
plot(x = head(aggregateCasesDataFrame$RESULTADO_ACUM7D,-aretirar), y = head(aggregateCasesDataFrame$RESULTADO7D,-aretirar) ,xlab = paste("Acumulados Confirmados promedio ", aretirar," dias"), ylab="Nuevos",main=estadoTxt, log="xy")
with (aggregateCasesDataFrame, lines(x = head( aggregateCasesDataFrame$RESULTADO_ACUM7D,-aretirar), y = head(aggregateCasesDataFrame$RESULTADO7D, -aretirar),col="red"))
if (saveToFile == TRUE) {
dev.off()
write.csv(aggregateCasesDataFrame,paste(estadoTxt,fileNameTxtIdent,".csv", sep=""))
#EpidemicCurve Name
png(paste(estadoTxt, "-Casos",fileNameTxtIdent ,".png", sep=""), width = 800, height = 600)
}
#Create the plot
barplot( head(aggregateCasesDataFrame$RESULTADO,-aretirar),names.arg=head(aggregateCasesDataFrame$FECHA_INGRESO,-aretirar),main=paste("Nuevos Ingresos",estadoTxt))
if (saveToFile == TRUE) {
# Close the file
dev.off()
}
#######################
#Restimate
######################
R_estimate <- estimate_R(head(aggregateCasesDataFrame$RESULTADO,-aretirar) ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
#	 plot
if (saveToFile == TRUE) {
setwd(pathToSave)
png(paste(estadoTxt,"-R Estimate", ".png",sep=""), width = 800, height = 600)
}
plot(R_estimate,  options_R = list( xlab ="Tiempo", ylab = "R"))
if (saveToFile == TRUE) {
dev.off()
write.csv(R_estimate$R, paste(estadoTxt,"-R Estimate",".csv",sep=""))
}
print(R_estimate$R)
result <-1
return(result)
}
#######################################
#Deaths
#######################################
generateCSVandPlotForConfimedDeaths <- function(confirmedDeathsDataFrame , estadoTxt,aretirar,  daysToAverage,saveToFile,pathToSave){
# confirmedDeathsDataFrame[,"DIASPARALADEFUNCION"] <-as.numeric(as.Date(confirmedDeathsDataFrame[,"FECHA_DEF"])  - as.Date(confirmedDeathsDataFrame[,"FECHA_INGRESO"]))
#aggregate
aggregateDeaths <- aggregate(formula = RESULTADO ~ FECHA_DEF,FUN = sum, data =confirmedDeathsDataFrame  )
#	survivalGroups  <- aggregate(formula = RESULTADO ~ DIASPARALADEFUNCION,FUN = sum, data =confirmedDeathsDataFrame  )
#add running sum
aggregateDeaths[,"RESULTADO_ACUM"]   <- cumsum(aggregateDeaths$RESULTADO)
aggregateDeaths[,"RESULTADO7D"]      <- promedioxdias(aggregateDeaths, daysToAverage ,"RESULTADO")
aggregateDeaths[,"RESULTADO_ACUM7D"] <- promedioxdias(aggregateDeaths, daysToAverage ,"RESULTADO_ACUM")
#	 plot
if (saveToFile == TRUE) {
#save
# 1. Open png file
setwd(pathToSave)
png(paste(estadoTxt,"-Deaths" ,".png",sep=""), width = 800, height = 600)
# 2. Create the plot
}
barplot( head(aggregateDeaths$RESULTADO,-aretirar),names.arg=head(aggregateDeaths$FECHA_DEF,-aretirar),main=paste("Deaths",estadoTxt))
if (saveToFile == TRUE) {
# 3. Close the file
dev.off()
write.csv(aggregateDeaths, paste(estadoTxt,"-Deaths",".csv",sep=""))
}
if (saveToFile == TRUE) {
#save
# 1. Open png file
setwd(pathToSave)
png(paste(estadoTxt,"-Survival" ,".png",sep=""), width = 800, height = 600)
}
#survivalGroupsPlot<-hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,100),breaks=20,col="Gray")
#survivalGroups<-cbind(survivalGroupsPlot$breaks,survivalGroupsPlot$counts)
if (saveToFile == TRUE) {
# 3. Close the file
dev.off()
#write.csv(survivalGroups, paste(estadoTxt,"-Survival",".csv",sep=""))
}
#print(aggregateDeaths)
#print(survivalGroups)
result <-1
return(result)
}
#######################################
# Start here
#######################################
#download and load into dataframe
setwd(mydir)
if (FALSE) {
download.file(myurl, myfile )
unzipfile <- unzip (myfile, list = TRUE)
unzip (myfile, unzipfile$Name)
confirmedCasesDataFrame <- read.csv ( file=unzipfile$Name)
} else {
confirmedCasesDataFrame <- read.csv ("/media/joaquin/Nuevo_vol/misdoc/Mios2020/covid19/FechaIngreso-crecimientodiario/backup/200711COVID19MEXICO.csv")
}
#fill state names
listaEstados <- c(1:32)
nombreEstados <-c ("AGUASCALIENTES","BAJA_CALIFORNIA","BAJA_CALIFORNIA_SUR","CAMPECHE",	"COAHUILA",	"COLIMA","CHIAPAS",	"CHIHUAHUA","CDMX",	"DURANGO","GUANAJUATO",	"GUERRERO",	"HIDALGO","JALISCO","ESTADO_DE_MEXICO","MICHOACAN","MORELOS","NAYARIT","NUEVO_LEON","OAXACA","PUEBLA","QUERETARO","QUINTANA_ROO","SAN_LUIS_POTOSI","SINALOA","SONORA","TABASCO","TAMAULIPAS","TLAXCALA","VERACRUZ","YUCATAN","ZACATECAS")
poblacionEstados <-c(1184996,3155070,637026,822441,2748391,650555,4796580,3406465,8851080,1632934,5486372,3388768,2665018,7350682,15175862,4351037,1777227,1084979,4653458,3801962,5779829,1827937,1325578,2585518,2767761,2662480,2238603,3268554,1169936,7643194,1955577,1490668)
#######################################
#countrycases
#######################################
#Keep only confirmed cases
confirmedCasesDataFrame  <- confirmedCasesDataFrame [ confirmedCasesDataFrame$RESULTADO == resultadoConfirmado,c("FECHA_INGRESO","RESULTADO","ENTIDAD_RES","MUNICIPIO_RES","FECHA_DEF")]
confirmedDeathsDataFrame <- confirmedCasesDataFrame [ confirmedCasesDataFrame$FECHA_DEF!=sinDefuncion  ,c("FECHA_DEF","FECHA_INGRESO","RESULTADO")]
generateCSVandPlotForConfirmedCasesMovingAverage (confirmedCasesDataFrame , "Mexico", daysForGraphToCutOff , movingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg")
generateCSVandPlotForConfimedDeaths (confirmedDeathsDataFrame , "Mexico", daysForGraphToCutOff,  movingAverageDays,TRUE,paste(mydir,"/img",sep=""))
##############################################
generateCSVandPlotForConfirmedCasesMovingAverage <- function(casesDataFrame , estadoTxt,aretirar, daysToAverage, saveToFile,pathToSave,fileNameTxtIdent){
aggregateCasesDataFrame <- aggregate(formula = RESULTADO ~ FECHA_INGRESO,FUN = sum, data = casesDataFrame)
#add running sum
aggregateCasesDataFrame[,"RESULTADO_ACUM"]   <- cumsum(aggregateCasesDataFrame$RESULTADO)
aggregateCasesDataFrame[,"RESULTADO7D"]      <- promedioxdias(aggregateCasesDataFrame, daysToAverage ,"RESULTADO")
aggregateCasesDataFrame[,"RESULTADO_ACUM7D"] <- promedioxdias(aggregateCasesDataFrame, daysToAverage ,"RESULTADO_ACUM")
dia_1 <- aggregateCasesDataFrame[1,"FECHA_INGRESO"]
# Generate Plots and save files
setwd(pathToSave)
if (saveToFile == TRUE) {
# Open png file
png(paste(estadoTxt, "-Acumvscurrent",fileNameTxtIdent ,".png", sep=""), width = 800, height = 600)
}
# Create the plot
plot(x = head(aggregateCasesDataFrame$RESULTADO_ACUM7D,-aretirar), y = head(aggregateCasesDataFrame$RESULTADO7D,-aretirar) ,xlab = paste("Acumulados Confirmados promedio ", aretirar," dias"), ylab="Nuevos",main=estadoTxt, log="xy")
with (aggregateCasesDataFrame, lines(x = head( aggregateCasesDataFrame$RESULTADO_ACUM7D,-aretirar), y = head(aggregateCasesDataFrame$RESULTADO7D, -aretirar),col="red"))
if (saveToFile == TRUE) {
dev.off()
write.csv(aggregateCasesDataFrame,paste(estadoTxt,fileNameTxtIdent,".csv", sep=""))
#EpidemicCurve Name
png(paste(estadoTxt, "-Casos",fileNameTxtIdent ,".png", sep=""), width = 800, height = 600)
}
#Create the plot
barplot( head(aggregateCasesDataFrame$RESULTADO,-aretirar),names.arg=head(aggregateCasesDataFrame$FECHA_INGRESO,-aretirar),main=paste("Nuevos Ingresos",estadoTxt))
if (saveToFile == TRUE) {
# Close the file
dev.off()
}
#######################
#Restimate
######################
R_estimate <- estimate_R(head(aggregateCasesDataFrame$RESULTADO,-aretirar) ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
#	 plot
if (saveToFile == TRUE) {
setwd(pathToSave)
png(paste(estadoTxt,"-R Estimate", ".png",sep=""), width = 800, height = 600)
}
plot(R_estimate,  options_R = list( xlab =paste("Tiempo",dia_1), ylab = "R"))
if (saveToFile == TRUE) {
dev.off()
write.csv(R_estimate$R, paste(estadoTxt,"-R Estimate",".csv",sep=""))
}
print(R_estimate$R)
result <-1
return(result)
}
generateCSVandPlotForConfirmedCasesMovingAverage (confirmedCasesDataFrame , "Mexico", daysForGraphToCutOff , movingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg")
R_estimate$R
aggregateCasesDataFrame <- aggregate(formula = RESULTADO ~ FECHA_INGRESO,FUN = sum, data = confiemrdCasesDataFrame)
aggregateCasesDataFrame <- aggregate(formula = RESULTADO ~ FECHA_INGRESO,FUN = sum, data = confirmedCasesDataFrame)
dia_1 <- aggregateCasesDataFrame[1,"FECHA_INGRESO"]
dia_1
dia_1[1]
dia_1[1,]
dia_1[,1]
dia_1[1,1]
dia_1(1)
dia_1
View(aggregateCasesDataFrame)
dia_1 <- aggregateCasesDataFrame[1,"FECHA_INGRESO"]
dia_1
dia_1[193]
c(dia_1[193])
c(dia_1[1])
c(dia_1[2])
c(dia_1)
dia_1[1]
length(dia_1)
length(dia_1[,1])
length(dia_1[,1])
R_estimate <- estimate_R(head(aggregateCasesDataFrame$RESULTADO,-aretirar) ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
R_estimate <- estimate_R(head(aggregateCasesDataFrame$RESULTADO,-7) ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
aggregateCasesDataFrame$RESULTADO,-7)
head(aggregateCasesDataFrame$RESULTADO,-7)
head(aggregateCasesDataFrame$FECHA_INGRESO,-7)
lenght(head(aggregateCasesDataFrame$FECHA_INGRESO,-7))
length(head(aggregateCasesDataFrame$FECHA_INGRESO,-7))
aggregateCasesDataFrame[length(head(aggregateCasesDataFrame$FECHA_INGRESO,-7)),"FECHA_INGRESO")
R_estimate$t_end
R_estimate
R_estimate$dates
R_estimate
as.Date(dia_1) +R_estimate$dates
R_estimate$R$t_end
s.Date(dia_1) +R_estimate$dates
s.Date(dia_1) +R_estimate$R$t_end
as.Date(dia_1) +R_estimate$R$t_end
R_estimate <- estimate_R(aggregateCasesDataFrame$RESULTADO ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
as.Date(dia_1) +R_estimate$R$t_end
dia_1 <- aggregateCasesDataFrame[1,"FECHA_INGRESO"]
as.Date(dia_1) +R_estimate$R$t_end
length(as.Date(dia_1) +R_estimate$R$t_end)
R_estimate$R
length(as.Date(dia_1) +R_estimate$R$t_end)
Rlength(as.Date(dia_1) +R_estimate$R$t_end)
as.Date(dia_1) +R_estimate$R$t_end
as.Date(dia_1) +97
length(as.Date(dia_1) +R_estimate$R$t_end)
plot(R_estimate)
View(aggregateCasesDataFrame)
View(aggregateCasesDataFrame)
aggregateCasesDataFrame[FECHA_INGRESO>'2020-03-23',]
aggregateCasesDataFrame[aggregateCasesDataFrame$FECHA_INGRESO >'2020-03-23',]
aggregateCasesDataFrame[aggregateCasesDataFrame$FECHA_INGRESO >'2020-03-23',]
View(aggregateCasesDataFrame)
head(aggregateCasesDataFrame,28)
head(aggregateCasesDataFrame,-28)
head(aggregateCasesDataFrame[28:])
aggregateCasesDataFrame[28:]
aggregateCasesDataFrame[28:,]
aggregateCasesDataFrame[:,]
aggregateCasesDataFrame[,]
aggregateCasesDataFrame[c(28,137),]
aggregateCasesDataFrame[c(28:137),]
aggregateCasesDataFrame[c("2020-03-24":"2020-07-11"),]
