hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,50))
hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,10))
hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,50))
hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,50),breaks=5)
hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,50),breaks=10)
hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,100),breaks=10)
hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,100),breaks=20)
hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,100),breaks=20,col="Green")
hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,100),breaks=20,col="Gray")
x<-hist(as.numeric(confirmedDeathsDataFrame$DIASPARALADEFUNCION),main ="Dias sobrevivencia",xlab="Dias",xlim=c(0,100),breaks=20,col="Gray")
x$counts
x$breaks
xÃ§
x
migrupo <- c(x$breaks,x$counts)
migrupo
migrupo <- c(x$breaks),c(x$counts)
migrupo [,"breaks"]<- c(x$breaks)
migrupx [,"breaks"]<- c(x$breaks)
migrupx ["breaks"]<- c(x$breaks)
migrupx [,"breaks"]<- c(x$breaks)
migrupx =[,c(x$breaks)]
migrupx =["bb"=c(x$breaks)]
cbind(x$breaks,x$counts)
data.frame("Breaks"=x$breaks,"count"=x$counts)
data.frame("Breaks"=x[,"breaks"],"count"=x$counts)
data.frame("Breaks"=x[,"breaks"],"count"=x$counts)
cbind(x$breaks,x$counts)
dd<-cbind(x$breaks,x$counts)
dd
dd [,1]
dd [,2]
df <- data.frame(c(1:10))
df
colnames(df)<- c("dato)
""
""
colnames(df)<- c("dato")
df
casospromDF <-df
promedios<- rep(0, length(casospromDF[,1]))
dias <-7
observaciones <-  c((dias+1):length (casospromDF[,1]) )
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, nombreColumna] + suma
}
prom <-  suma / dias
promedios[i] = prom
}
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
}
prom <-  suma / dias
promedios[i] = prom
}
promedios
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
}
prom <-  suma / dias
promedios[i] = prom
}
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
}
prom <-  suma / dias
promedios[i] = prom
}
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
suma }
prom <-  suma / dias
promedios[i] = prom
}
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
suma }
prom <-  suma / dias
promedios[i] = prom
}
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
suma }
prom <-  suma / dias
promedios[i] = prom
}
print(suma)
print(suma)
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
print (i)
print(j)
print(casospromDF[j, "dato"])
print(suma)
}
prom <-  suma / dias
promedios[i] = prom
}
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
print ("i "=i)
print("j=",j)
print("dato",casospromDF[j, "dato"])
print("suma",suma)
}
print ("resultado suma",suma)
prom <-  suma / dias
promedios[i] = prom
}
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
print ("i ",i)
print("j=",j)
print("dato",casospromDF[j, "dato"])
print("suma",suma)
}
print ("resultado suma",suma)
prom <-  suma / dias
promedios[i] = prom
}
df <- data.frame(c(1:10))
colnames(df)<- c("dato")
promedios<- rep(0, length(casospromDF[,1]))
dias <-7
observaciones <-  c((dias+1):length (casospromDF[,1]) )
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
print (paste("i ",i)))
print(paste("j=",j))
print(paste("dato",casospromDF[j, "dato"]))
print(paste("suma",suma))
}
print paste(("resultado suma",suma))
prom <-  suma / dias
promedios[i] = prom
}
df <- data.frame(c(1:10))
colnames(df)<- c("dato")
promedios<- rep(0, length(casospromDF[,1]))
dias <-7
observaciones <-  c((dias+1):length (casospromDF[,1]) )
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
print (paste("i ",i)))
print(paste("j=",j))
print(paste("dato",casospromDF[j, "dato"]))
print(paste("suma",suma))
}
print (paste("resultado suma",suma))
prom <-  suma / dias
promedios[i] = prom
}
df <- data.frame(c(1:10))
colnames(df)<- c("dato")
promedios<- rep(0, length(casospromDF[,1]))
dias <-7
observaciones <-  c((dias+1):length (casospromDF[,1]) )
df <- data.frame(c(1:10))
colnames(df)<- c("dato")
promedios<- rep(0, length(casospromDF[,1]))
dias <-7
observaciones <-  c((dias+1):length (casospromDF[,1]) )
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
print (paste("i ",i))
print(paste("j=",j))
print(paste("dato",casospromDF[j, "dato"]))
print(paste("suma",suma))
}
print (paste("resultado suma",suma))
prom <-  suma / dias
promedios[i] = prom
}
casospromDF <- data.frame(c(1:10))
colnames(casospromDF)<- c("dato")
promedios<- rep(0, length(casospromDF[,1]))
dias <-7
observaciones <-  c((dias+1):length (casospromDF[,1]) )
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
print (paste("i ",i))
print(paste("j=",j))
print(paste("dato",casospromDF[j, "dato"]))
print(paste("suma",suma))
}
print (paste("resultado suma",suma))
prom <-  suma / dias
promedios[i] = prom
}
casospromDF <- data.frame(c(1:10))
colnames(casospromDF)<- c("dato")
promedios<- rep(0, length(casospromDF[,1]))
dias <-7
observaciones <-  c((dias+1):length (casospromDF[,1]) )
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : i-1)
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
print (paste("i ",i))
print(paste("j=",j))
print(paste("dato",casospromDF[j, "dato"]))
print(paste("suma",suma))
}
print (paste("resultado suma",suma))
prom <-  suma / dias
promedios[i] = prom
}
casospromDF <- data.frame(c(1:10))
colnames(casospromDF)<- c("dato")
promedios<- rep(0, length(casospromDF[,1]))
dias <-7
observaciones <-  c((dias+1):length (casospromDF[,1]) )
c(8-1:8-1)
c(8-1: 8)
c(1: 8)
c( (8-1 ): 8)
c( (8-1 ): (8-1)
)
c( (8-1 ): (8-1))
casospromDF <- data.frame(c(1:10))
colnames(casospromDF)<- c("dato")
promedios<- rep(0, length(casospromDF[,1]))
dias <-7
observaciones <-  c((dias+1):length (casospromDF[,1]) )
for (i in observaciones ) {
suma <-0
ventana <-c( (i - dias) : (i-1))
for (j in ventana ) {
suma= casospromDF[j, "dato"] + suma
print (paste("i ",i))
print(paste("j=",j))
print(paste("dato",casospromDF[j, "dato"]))
print(paste("suma",suma))
}
print (paste("resultado suma",suma))
prom <-  suma / dias
promedios[i] = prom
}
#Script which calculates the
#CSV and Plot Generation for confirmed covid cases in Mexico by detection Date (FECHA_INGRESO)
#  Considering confirmed New cases and accumulated , using an average of x days and cutting off 7 days due of incomplete data
#  giving a CSV as a result
#  , "","FECHA_INGRESO","RESULTADO","RESULTADO_ACUM","RESULTADO_average7D","RESULTADO_averageACUM7D"
#R estimate for the above values
# Gets data from
#http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
#http://epidemiologia.salud.gob.mx/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
#http://datosabiertos.salud.gob.mx/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
remove(list = ls())
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
#Omited for 3.6
#install.packages("Rcurl")
#install.packages("ggplot2")
#library("RCurl")
#library(ggplot2)
library(devtools)
library(EpiEstim)
mydir <-  '/media/joaquin/Nuevo_vol/misdoc/Mios2020/covid19/FechaIngreso-crecimientodiario'
myurl <-  'http://datosabiertos.salud.gob.mx/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip'
myfile <- 'datos_abiertos_covid19.zip'
confirmedResult  = 1
daysForGraphToCutOff = 7
movingAverageDays = 7
notDead = '9999-99-99'
resultadosR = data.frame(stringsAsFactors = FALSE)
##############################################
# for a specific column  calculates the average of the last x days
##############################################
xDaysAverage <- function(averageCasesDataFrame,  days, columnName){
#fill vector with zeroes
averageVector<- rep(0, length(averageCasesDataFrame[,1]))
#we are going to calculate starting at days  position, to correcly calculate the average
measureVector <-  c((days+1):length (averageCasesDataFrame[,1]) )
for (i in measureVector ) {
sum <-0
window <-c( (i - days) : (i-1))
for (j in window ) {
sum= averageCasesDataFrame[j, columnName] + sum
}
average <-  sum / days
averageVector[i] = average
}
return(averageVector)
}
##############################################
# for a specific column calculates the sum of the  last x days
##############################################
sumxdays <- function(averageCasesDataFrame,  days, columnName){
#fill vector with zeroes
sums<- rep(0, length(averageCasesDataFrame[,1]))
#we are going to calculate starting at days  position, to correcly calculate the average
measureVector <-  c((days+1):length (averageCasesDataFrame[,1]) )
for (i in measureVector ) {
sum <-0
window <-c( (i - days) : (i-1))
for (j in window ) {
sum= averageCasesDataFrame[j, columnName] + sum
}
sums[i] = sum
}
return(sums)
}
##############################################
# for a specific column calculate the difference between the weekly average of today and the weekly average of last week
##############################################
differenceBetweenTodayandxdaysAverages <- function(averageCasesDataFrame,  days, columnName){
#fill vector with zeroes
sums<- rep(0, length(averageCasesDataFrame[,1]))
#we are going to calculate starting at days  position, to correctly calculate the average
measureVector <-  c((days+1):length (averageCasesDataFrame[,1]) )
for (i in measureVector ) {
sums[i]= averageCasesDataFrame[i, columnName] - averageCasesDataFrame[i-days, columnName]
}
return(sums)
}
#############################################
#Plot Accumulated VS Current cases
#############################################
generatePlotAccumulatedVSCurrent <- function(aggregateCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, saveToFile,pathToSave,fileNameTxtIdent,poblacion,campo){
print(paste("Calculating ->",ProvinceTxt))
day_1 <- aggregateCasesDataFrame[1,c(campo)]
maxRow <- length(aggregateCasesDataFrame[,c(campo)])
maxDate <-aggregateCasesDataFrame[maxRow-daysToIgnore,c(campo)]
# Generate Plot accumulated vs current
setwd(pathToSave)
# Open png file
png(paste(ProvinceTxt, "-Acumvscurrent",fileNameTxtIdent ,".png", sep=""), width = 1024, height = 768)
# Create the plot
plot(x = head(aggregateCasesDataFrame$RESULTADO_averageACUM7D,-daysToIgnore),
y = head(aggregateCasesDataFrame$RESULTADO_average7D,-daysToIgnore) ,
xlab = paste("Acumulados Confirmados averageedio ", daysToIgnore," days"),
ylab="Nuevos",main=paste(ProvinceTxt,day_1,"a",maxDate),
log="xy")
with (aggregateCasesDataFrame, lines(x = head( aggregateCasesDataFrame$RESULTADO_averageACUM7D,-daysToIgnore),
y = head(aggregateCasesDataFrame$RESULTADO_average7D,     -daysToIgnore),col="red"))
dev.off()
write.csv(aggregateCasesDataFrame,paste(ProvinceTxt,fileNameTxtIdent,".csv", sep=""))
#EpidemicCurve Name
png(paste(ProvinceTxt, "-Casos",fileNameTxtIdent ,".png", sep=""), width = 1024, height = 768)
#Create the plot
barplot( head(aggregateCasesDataFrame$RESULTADO,-daysToIgnore),
names.arg=head(aggregateCasesDataFrame[,c(campo)],-daysToIgnore),
main=paste("Nuevos Ingresos",ProvinceTxt,day_1,"a",maxDate),
las=2,
col ="#0066cc")
dev.off()
#weeklyChange curve
colores = ifelse( head(aggregateCasesDataFrame$RESULTADO_DIFSUM7D,-daysToIgnore) > 1 ,rgb(0.2,0.4,0.6,0.6), "#69b3a2")
png(paste(ProvinceTxt, "-CasosVsSemAnt",fileNameTxtIdent ,".png", sep=""), width = 1024, height = 768)
#Create the plot
barplot( head(aggregateCasesDataFrame$RESULTADO_DIFSUM7D,-daysToIgnore),
names.arg=head(aggregateCasesDataFrame[, c(campo)],-daysToIgnore),
main=paste("Nuevos Ingresos esta semana vs semana anterior",ProvinceTxt,day_1,"a",maxDate),
las=2,
col = colores)
dev.off()
}
#############################################
#Calculate R Estimation and Plot
#############################################
generateRandPlot<- function(aggregateCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, saveToFile,pathToSave,fileNameTxtIdent,poblacion){
#######################
#Restimate
######################
R_estimate <- estimate_R(head(aggregateCasesDataFrame$RESULTADO,-daysToIgnore) ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
day_1 <- aggregateCasesDataFrame[1,"FECHA_INGRESO"]
maxRow <- length(R_estimate$R$`Mean(R)`)
maxDate <- R_estimate$R$t_end[maxRow]
latestdayinR0Estimation<- aggregateCasesDataFrame[maxDate,"FECHA_INGRESO"]
latestR0Value <- R_estimate$R$`Mean(R)`[maxRow]
#	 plot Restimates
setwd(pathToSave)
png(paste(ProvinceTxt,"-R Estimate", ".png",sep=""), width = 1024, height = 768)
plot(R_estimate,
options_I = list(col ="#0066cc",  ylab = "Incidencia"),
options_R = list( xlab =paste(ProvinceTxt," Del",day_1, "al",latestdayinR0Estimation, "Rt:",latestR0Value ), ylab = "R"))
dev.off()
write.csv(R_estimate$R, paste(ProvinceTxt,"-R Estimate",".csv",sep=""))
df <- data.frame(ProvinceTxt,latestdayinR0Estimation, latestR0Value)
colnames(df) <- c("Entidad","Dia","R0")
return (df)
}
##############################################
#Calculate running sums for cases
##############################################
aggregateCases <- function(casesDataFrame,daysToAverage ){
aggregateCasesDataFrame <- aggregate(formula = RESULTADO ~ FECHA_INGRESO , FUN = sum, data = casesDataFrame)
#add running sum
aggregateCasesDataFrame[,"RESULTADO_ACUM"]        <- cumsum(aggregateCasesDataFrame$RESULTADO)
aggregateCasesDataFrame[,"RESULTADO_average7D"]      <- xDaysAverage(aggregateCasesDataFrame, daysToAverage ,"RESULTADO")
aggregateCasesDataFrame[,"RESULTADO_averageACUM7D"]  <- xDaysAverage(aggregateCasesDataFrame, daysToAverage ,"RESULTADO_ACUM")
aggregateCasesDataFrame[,"RESULTADO_SUM7D"]       <- sumxdays (aggregateCasesDataFrame, daysToAverage ,"RESULTADO")
aggregateCasesDataFrame[,"RESULTADO_DIFSUM7D"]    <- differenceBetweenTodayandxdaysAverages (aggregateCasesDataFrame, daysToAverage ,"RESULTADO_SUM7D")
return (aggregateCasesDataFrame)
}
##############################################
#############################################
aggregateMortalityCases <- function(casesDataFrame,daysToAverage ){
aggregateCasesDataFrame <- aggregate(formula = RESULTADO ~ FECHA_DEF , FUN = sum, data = casesDataFrame)
#add running sum
aggregateCasesDataFrame[,"RESULTADO_ACUM"]   <- cumsum(aggregateCasesDataFrame$RESULTADO)
aggregateCasesDataFrame[,"RESULTADO_average7D"]      <- xDaysAverage(aggregateCasesDataFrame, daysToAverage ,"RESULTADO")
aggregateCasesDataFrame[,"RESULTADO_averageACUM7D"] <- xDaysAverage(aggregateCasesDataFrame, daysToAverage ,"RESULTADO_ACUM")
aggregateCasesDataFrame[,"RESULTADO_SUM7D"]       <- sumxdays (aggregateCasesDataFrame, daysToAverage ,"RESULTADO")
aggregateCasesDataFrame[,"RESULTADO_DIFSUM7D"]    <- differenceBetweenTodayandxdaysAverages (aggregateCasesDataFrame, daysToAverage ,"RESULTADO_SUM7D")
return (aggregateCasesDataFrame)
}
#######################################
#plotRstates
#######################################
plotRstates <- function(resultadosR, saveToFile, pathToSave){
names(resultadosR) <- c("Entidad","Dia","R0")
print(resultadosR)
setwd(pathToSave)
png(paste("All","-R0" ,".png",sep=""), width = 1024, height = 768)
# Increase margin size
par(mar=c(12,4,4,4))
colores = ifelse( resultadosR[order(-resultadosR$R0),3]  > 1 ,rgb(0.2,0.4,0.6,0.6), "#69b3a2")
xx <-  barplot(resultadosR[order(-resultadosR$R0),3], names.arg=resultadosR[order(-resultadosR$R0),1],main="ValoresR" ,las=2,
col=colores)
## Add text at top of bars
text(x = xx, y = resultadosR[order(-resultadosR$R0),3], label = round(resultadosR[order(-resultadosR$R0),3], digits=2),
pos = 1, cex = 0.5, col = "red")
dev.off()
write.csv(resultadosR, paste("All","-R0",".csv",sep=""))
}
#######################################
# Start here
#######################################
#download and load into dataframe
setwd(mydir)
if (TRUE) {
download.file(myurl, myfile )
unzipfile <- unzip (myfile, list = TRUE)
unzip (myfile, unzipfile$Name)
confirmedCasesDataFrame <- read.csv ( file=unzipfile$Name)
} else {
confirmedCasesDataFrame <- read.csv ("/media/joaquin/Nuevo_vol/misdoc/Mios2020/covid19/FechaIngreso-crecimientodiario/backup/200805COVID19MEXICO.csv")
}
#fill state names
listaEstados <- c(1:32)
nombreEstados <-c ("AGUASCALIENTES","BAJA_CALIFORNIA","BAJA_CALIFORNIA_SUR","CAMPECHE",	"COAHUILA",	"COLIMA","CHIAPAS",	"CHIHUAHUA","CDMX",	"DURANGO","GUANAJUATO",	"GUERRERO",	"HIDALGO","JALISCO","ESTADO_DE_MEXICO","MICHOACAN","MORELOS","NAYARIT","NUEVO_LEON","OAXACA","PUEBLA","QUERETARO","QUINTANA_ROO","SAN_LUIS_POTOSI","SINALOA","SONORA","TABASCO","TAMAULIPAS","TLAXCALA","VERACRUZ","YUCATAN","ZACATECAS")
poblacionEstados <-c(1184996,3155070,637026,822441,2748391,650555,4796580,3406465,8851080,1632934,5486372,3388768,2665018,7350682,15175862,4351037,1777227,1084979,4653458,3801962,5779829,1827937,1325578,2585518,2767761,2662480,2238603,3268554,1169936,7643194,1955577,1490668)
#######################################
#countrycases
#######################################
#Keep only confirmed case
confirmedCasesDataFrame  <- confirmedCasesDataFrame [ confirmedCasesDataFrame$RESULTADO == confirmedResult,c("FECHA_INGRESO","RESULTADO","ENTIDAD_RES","MUNICIPIO_RES","FECHA_DEF")]
aggregateconfirmedCasesDataFrame  <-aggregateCases (confirmedCasesDataFrame,movingAverageDays )
generatePlotAccumulatedVSCurrent      (aggregateconfirmedCasesDataFrame , "Mexico", daysForGraphToCutOff , movingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg",130000000,"FECHA_INGRESO")
miR0 <- generateRandPlot  (aggregateconfirmedCasesDataFrame , "Mexico", daysForGraphToCutOff , movingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg",130000000)
resultadosR<-rbind(resultadosR,miR0)
write.csv(aggregateMortalityCases (confirmedCasesDataFrame,movingAverageDays ), paste("Mexico","-Mortality",".csv",sep=""))
#######################################
#statewide
#######################################
for (i in 1:length(listaEstados)) {
#Arguments: dataframe with country wide cases, state number, state name	, cut-off days, cases' number of days to average  , savetoFile, path
stateCasesDataFrame<- confirmedCasesDataFrame [ confirmedCasesDataFrame$RESULTADO==confirmedResult & confirmedCasesDataFrame$ENTIDAD_RES == i, c("FECHA_INGRESO","RESULTADO","FECHA_DEF")]
aggregateconfirmedCasesDataFrame  <-aggregateCases (stateCasesDataFrame,movingAverageDays )
generatePlotAccumulatedVSCurrent      (aggregateconfirmedCasesDataFrame, nombreEstados[[i]],daysForGraphToCutOff , movingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg", poblacionEstados[[i]],"FECHA_INGRESO")
miR0 <- generateRandPlot  (aggregateconfirmedCasesDataFrame, nombreEstados[[i]],daysForGraphToCutOff , movingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg", poblacionEstados[[i]])
resultadosR<-rbind(resultadosR,miR0)
write.csv(aggregateMortalityCases (stateCasesDataFrame,movingAverageDays ), paste(nombreEstados[[i]],"-Mortality",".csv",sep=""))
}
