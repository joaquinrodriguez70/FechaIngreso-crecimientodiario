sigma = 0.24, gamma = 1 / 7)
PlotMods(seir)
parameters <- c(mu = 0, beta =0.04*20 ,
sigma = 0.025, gamma = 1 / 7)
PlotMods(seir)
install.packages('EpiDynamics')
library(EpiDynamics)
# Initial conditions
initials <- c(S = 0.9, E = .01, I = .001, R = 1 - 0.9 - .01 - .001)
# parameters must be in the following order
# mu = the per capita death rate (and the population level birth rate),
# beta = transmission rate,  (1/beta  is de probability that an suceptibe becomes infected when is contacted by an infected)
# sigma =  the movement form exposed to infectious, or incubation time  (1/14 is fourteen days)
# gamma =  the recovery rate (1/7 is seven days)
#as a note
# R0 = the reproduction rate , beta / gamma
#if R0 = 1.2 , beta is 60/350
#in the example R0 is 9.56
#for covid-19 ,  sigma=1/7 and gamma =1/5 , with an r0 of 1.2,beta=0.24 or  6/25
#parameters <- c(mu = 1 / (70 * 365), beta = 500 / 365,
#                sigma = 1 / 14, gamma = 1 / 7)
parameters <- c(mu = 1 / (70 * 365), beta = 6 / 25,
sigma = 1 / 7, gamma = 1 / 5)
# this example is meant to be read in days, for example the recovery rate at 1/7 means an individual is infectious, but recovers in 7 days.
# Solve and plot.
seir <- SEIR(pars = parameters, init = initials, time = 0:180)
PlotMods(seir)
print(seir$results)
parameters <- c(mu = 1 / (70 * 365), beta = 44 / 100,
sigma = 1 / 7, gamma = 1 / 5)
# this example is meant to be read in days, for example the recovery rate at 1/7 means an individual is infectious, but recovers in 7 days.
# Solve and plot.
seir <- SEIR(pars = parameters, init = initials, time = 0:180)
PlotMods(seir)
print(seir$results)
parameters <- c(mu = 1 / (70 * 365), beta = 1.71/5,
sigma = 1 / 7, gamma = 1 / 5)
# this example is meant to be read in days, for example the recovery rate at 1/7 means an individual is infectious, but recovers in 7 days.
# Solve and plot.
seir <- SEIR(pars = parameters, init = initials, time = 0:180)
PlotMods(seir)
print(seir$results
)
install.packages("klaR")
setwd("/Users/joaquin/Downloads/1")
dfrPoblacion  <- read.csv ("./base_municipios_final_datos_01.csv")
dfrPoblacion  <- read.delim ("./base_municipios_final_datos_01.csv")
dfrPoblacion  <- read.csv ("./base1.csv")
dfrPoblacion2020 <- dfrPoblacion(AO==2020,)
dfrPoblacion2020 <- dfrPoblacion(AO==2020,)
dfrPoblacion2020 <- dfrPoblacion[AO==2020,]
dfrPoblacion2020 <- dfrPoblacion[dbfProblacion.AO==2020,]
dfrPoblacion2020 <- dfrPoblacion[dbfProblacion$AO==2020,]
dfrPoblacion2020 <- dfrPoblacion[dbfPoblacion$AO==2020,]
dfrPoblacion2020 <- dfrPoblacion[dfrPoblacion$AO==2020,]
View(dfrPoblacion2020)
View(dfrPoblacion2020[dfrPoblacion$CLAVE_ENT==16,])
View(dfrPoblacion2020[dfrPoblacion$CLAVE_ENT=='16'',])
''
View(dfrPoblacion2020[dfrPoblacion$CLAVE_ENT=="16",])
View(dfrPoblacion2020[dfrPoblacion2020$CLAVE_ENT=="16",])
dfrPob1 <- aggregate(cbind(CLAVE,CLAVE_ENT,NOM_ENT,MUN,AO) ~ POB, data = dfrPoblacion2020,  FUN = sum)
View(dfrPoblacion)
View(dfrPob1)
aggregate(cbind(POB) ~ c(CLAVE,CLAVE_ENT,NOM_ENT,MUN,AO), data = dfrPoblacion2020,  FUN = sum)
aggregate(POB , c(CLAVE,CLAVE_ENT,NOM_ENT,MUN,AO), data = dfrPoblacion2020,  FUN = sum)
aggregate(dfrPoblacion202$POB , c(CLAVE,CLAVE_ENT,NOM_ENT,MUN,AO), data = dfrPoblacion2020,  FUN = sum)
aggregate(dfrPoblacion2020$POB , c(CLAVE,CLAVE_ENT,NOM_ENT,MUN,AO), data = dfrPoblacion2020,  FUN = sum)
aggregate(dfrPoblacion2020$POB , c("CLAVE","CLAVE_ENT","NOM_ENT","MUN","AO"), data = dfrPoblacion2020,  FUN = sum)
aggregate(dfrPoblacion2020$POB , list("CLAVE","CLAVE_ENT","NOM_ENT","MUN","AO"), data = dfrPoblacion2020,  FUN = sum)
aggregate(dfrPoblacion2020$POB , list("CLAVE","CLAVE_ENT","NOM_ENT","MUN","AO"), data = dfrPoblacion2020,  FUN = sum)
aggregate(dfrPoblacion2020$POB , list(dfrPoblacion2020$CLAVE,dfrPoblacion2020$CLAVE_ENT,dfrPoblacion2020$NOM_ENT,dfrPoblacion2020$MUN), data = dfrPoblacion2020,  FUN = sum)
aggregate(dfrPoblacion2020$POB , list(dfrPoblacion2020$CLAVE,dfrPoblacion2020$CLAVE_ENT,dfrPoblacion2020$NOM_ENT,dfrPoblacion2020$MUN),  sum)
aggregate(dfrPoblacion2020$POB , list(dfrPoblacion2020$CLAVE,dfrPoblacion2020$CLAVE_ENT,dfrPoblacion2020$NOM_ENT,dfrPoblacion2020$MUN),  sum)
aggregate(dfrPoblacion2020$ , list(CLAVE,CLAVE_ENT,NOM_ENT,MUN),  sum)
aggregate(dfrPoblacion2020 , list(CLAVE,CLAVE_ENT,NOM_ENT,MUN),  sum)
dfrPoblacion2020 % > %
group_by(CLAVE,CLAVE_ENT,NOM_ENT,MUN) % > %
summarise(pobacion = sum(POB))
library(dplyr)
dfrPoblacion2020 % > %
group_by(CLAVE,CLAVE_ENT,NOM_ENT,MUN) % > %
summarise(pobacion = sum(POB))
dfrPoblacion2020 % > %
group_by(CLAVE,CLAVE_ENT,NOM_ENT,MUN) % > %
summarise(pobacion = sum(POB))
dfrPoblacion2020 %>%
group_by(CLAVE,CLAVE_ENT,NOM_ENT,MUN) %>%
summarise(pobacion = sum(POB))
dfrPoblacion2020 %>%
group_by(CLAVE,CLAVE_ENT,NOM_ENT,MUN) %>%
summarise(pobacion = sum(as.numeric(POB))
)
dfrPoblacion2020 %>%
group_by(CLAVE,CLAVE_ENT,NOM_ENT,MUN) %>%
summarise(pobacion = sum(as.numeric(POB))
)
)
drPobMuni <- dfrPoblacion2020 %>%
group_by(CLAVE,CLAVE_ENT,NOM_ENT,MUN) %>%
summarise(pobacion = sum(as.numeric(POB))
)
View(drPobMuni)
write.csv(drPobMuni,paste("pobmuni",".csv",sep=""))
View(dfrPoblacion2020)
write.csv(dfrPoblacion2020,paste("pobmuni",".csv",sep=""))
#Script that creates covid-19 cases graphs for Mexico, its states and counties by detection Date (FECHA_INGRESO)
# 1) Graph  for 7 days average for new cases and accumulated, cutting 7 days  due of preliminary data
# 2) Graph with the epidemic curve
# 3) Graph with the difference  between the 7 days accumulated cases and the 7 days prior
# 4) CSV file with the  7 days average for new cases and accumulated,
# 5) Mortality csv
# 6) Mortality 7 days average Graph
# 7) R Estimate in CSV
# 8) Graph for R estimate
#  , "","FECHA_INGRESO","RESULTADO_LAB","RESULTADO_ACUM","RESULTADO_average7D","RESULTADO_averageACUM7D"
#R estimate for the above values
# Gets data from
#http://187.191.75.115/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
#http://epidemiologia.salud.gob.mx/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
#http://datosabiertos.salud.gob.mx/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip
remove(list = ls())
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
#Omited for 3.6
#install.packages("Rcurl")
#install.packages("ggplot2")
#library("RCurl")
#library(ggplot2)
switch(Sys.info()[['sysname']],
Windows= {install.packages("devtools")
install.packages("EpiEstim")
mydir <-  'E:/misdoc/Mios2020/covid19/FechaIngreso-crecimientodiario'
},
Linux  = {print("I'm a penguin.")
},
Darwin = {mydir <-  '/Users/joaquin/Documents/Mios2020/covid/FechaIngreso-crecimientodiario'
})
#descomentar para Windows Portable
library(devtools)
library(EpiEstim)
#mydir <-  'E:/misdoc/Mios2020/covid19/FechaIngreso-crecimientodiario'
strUrl <-  'http://datosabiertos.salud.gob.mx/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip'
strFilename <- 'datos_abiertos_covid19.zip'
strConfirmedResult  = 1
idaysForGraphToCutOff = 7
imovingAverageDays = 7
notDead = '9999-99-99'
dfrAllR0 = data.frame(stringsAsFactors = FALSE)
##############################################
# for a specific column  calculates the average of the last x days
##############################################
aux_averageforNDays <- function(averageCasesDataFrame,  days, columnName){
#fill vector with zeroes
averageVector<- rep(0, length(averageCasesDataFrame[,1]))
#we are going to calculate starting at days  position, to correcly calculate the average
measureVector <-  c((days+1):length (averageCasesDataFrame[,1]) )
for (i in measureVector ) {
sum <-0
window <-c( (i - days) : (i-1))
for (j in window ) {
sum= averageCasesDataFrame[j, columnName] + sum
}
average <-  sum / days
averageVector[i] = average
}
return(averageVector)
}
##############################################
# for a specific column calculates the sum of the  last x days
##############################################
aux_sumForNDays <- function(averageCasesDataFrame,  days, columnName){
#fill vector with zeroes
sums<- rep(0, length(averageCasesDataFrame[,1]))
#we are going to calculate starting at days  position, to correcly calculate the average
measureVector <-  c((days+1):length (averageCasesDataFrame[,1]) )
for (i in measureVector ) {
sum <-0
window <-c( (i - days) : (i-1))
for (j in window ) {
sum= averageCasesDataFrame[j, columnName] + sum
}
sums[i] = sum
}
return(sums)
}
##############################################
# for a specific column calculate the difference between the weekly average of today and the weekly average of last week
##############################################
aux_differenceBetweenTodayandaNDaysAverage <- function(averageCasesDataFrame,  days, columnName){
#fill vector with zeroes
sums<- rep(0, length(averageCasesDataFrame[,1]))
#we are going to calculate starting at days  position, to correctly calculate the average
measureVector <-  c((days+1):length (averageCasesDataFrame[,1]) )
for (i in measureVector ) {
sums[i]= averageCasesDataFrame[i, columnName] - averageCasesDataFrame[i-days, columnName]
}
return(sums)
}
#############################################
#Plot Accumulated VS Current cases
#############################################
generatePlotForAccumulatedandCurrentCases <- function(dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion){
campo="FECHA_INGRESO"
print(paste("Calculating ->",ProvinceTxt))
day_1 <- dfrCasesDataFrame[1,c(campo)]
maxRow <- length(dfrCasesDataFrame[,c(campo)])
maxDate <-dfrCasesDataFrame[maxRow-daysToIgnore,c(campo)]
# Generate Plot accumulated vs current
setwd(strPathToSave)
# Open png file
png(paste(ProvinceTxt, "-Acumvscurrent",strFilename ,".png", sep=""), width = 1024, height = 768)
# Create the plot
plot(x = head(dfrCasesDataFrame$RESULTADO_averageACUM7D,-daysToIgnore),
y = head(dfrCasesDataFrame$RESULTADO_average7D,-daysToIgnore) ,
xlab = paste("Acumulados Confirmados averageedio ", daysToIgnore," days"),
ylab="Nuevos",main=paste(ProvinceTxt,day_1,"a",maxDate),
log="xy")
with (dfrCasesDataFrame, lines(x = head( dfrCasesDataFrame$RESULTADO_averageACUM7D,-daysToIgnore),
y = head(dfrCasesDataFrame$RESULTADO_average7D,     -daysToIgnore),col="red"))
dev.off()
}
#############################################
#Generate Epidemic Curve
#############################################
generateEpidemicCurve <- function(dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion){
campo="FECHA_INGRESO"
print(paste("Calculating ->",ProvinceTxt))
day_1 <- dfrCasesDataFrame[1,c(campo)]
maxRow <- length(dfrCasesDataFrame[,c(campo)])
maxDate <-dfrCasesDataFrame[maxRow-daysToIgnore,c(campo)]
write.csv(dfrCasesDataFrame,paste(ProvinceTxt,strFilename,".csv", sep=""))
#EpidemicCurve Name
png(paste(ProvinceTxt, "-Casos",strFilename ,".png", sep=""), width = 1024, height = 768)
#Create the plot
barplot( head(dfrCasesDataFrame$RESULTADO_LAB,-daysToIgnore),
names.arg=head(dfrCasesDataFrame[,c(campo)],-daysToIgnore),
main=paste("Nuevos Ingresos",ProvinceTxt,day_1,"a",maxDate),
las=2,
col ="#0066cc")
dev.off()
}
#############################################
#Generate Weekly Change Curve
#############################################
generateWeeklyChangeCurve <- function(dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion){
campo="FECHA_INGRESO"
print(paste("Calculating ->",ProvinceTxt))
day_1 <- dfrCasesDataFrame[1,c(campo)]
maxRow <- length(dfrCasesDataFrame[,c(campo)])
maxDate <-dfrCasesDataFrame[maxRow-daysToIgnore,c(campo)]
#weeklyChange curve
colores = ifelse( head(dfrCasesDataFrame$RESULTADO_DIFSUM7D,-daysToIgnore) > 1 ,rgb(0.2,0.4,0.6,0.6), "#69b3a2")
png(paste(ProvinceTxt, "-CasosVsSemAnt",strFilename ,".png", sep=""), width = 1024, height = 768)
#Create the plot
barplot( head(dfrCasesDataFrame$RESULTADO_DIFSUM7D,-daysToIgnore),
names.arg=head(dfrCasesDataFrame[, c(campo)],-daysToIgnore),
main=paste("Nuevos Ingresos esta semana vs semana anterior",ProvinceTxt,day_1,"a",maxDate),
las=2,
col = colores)
dev.off()
}
#############################################
#Generate all the graphs
#############################################
generateGraphsForCases <- function(dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion,campo){
generatePlotForAccumulatedandCurrentCases (dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion)
generateEpidemicCurve  (dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion)
generateWeeklyChangeCurve (dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion)
}
#######################################
#generateMortalityGraph (like Epidemic Curve)
#######################################
generateMortalityGraph <-function(dfrConfirmedCases,imovingAverageDays , strProvincename, strFilename) {
#dfrMortalityCases <- head(aggregateMortalityCases (dfrConfirmedCases,imovingAverageDays ), -(1+imovingAverageDays))
dfrMortalityCases <- aggregateMortalityCases (dfrConfirmedCases,imovingAverageDays )
day_1 <- dfrMortalityCases[1,c("FECHA_DEF")]
maxRow <- length(dfrMortalityCases[,c("FECHA_DEF")])
maxDate <-dfrMortalityCases[maxRow,c("FECHA_DEF")]
write.csv(dfrMortalityCases,paste(strFilename,".csv",sep=""))
png(paste(strFilename,".png",sep=""), width = 1024, height = 768)
barplot( dfrMortalityCases$RESULTADO_SUM7D,
names.arg=dfrMortalityCases$FECHA_DEF,
main=paste("Mortalidad Suma 7 Dias",strProvincename,day_1,"a",maxDate),
las=2,
col ="#FF9000")
dev.off()
}
#############################################
#Generate Weekly Mortality Change Curve
#############################################
generateMortalityWeeklyChangeCurve <- function(dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, strFilename){
dfrMortalityCases <- head(aggregateMortalityCases (dfrCasesDataFrame,daysToAverage ), -(1+daysToAverage))
campo="FECHA_DEF"
print(paste("Calculating ->",ProvinceTxt))
day_1 <- dfrMortalityCases [1,c(campo)]
maxRow <- length(dfrMortalityCases [,c(campo)])
maxDate <-dfrMortalityCases [maxRow-daysToIgnore,c(campo)]
#weeklyChange curve
colores = ifelse( head(dfrMortalityCases $RESULTADO_DIFSUM7D,-daysToIgnore) > 0 ,"#832E97", "#43972e")
png(paste(ProvinceTxt, "-Mortality CasosVsSemAnt",strFilename ,".png", sep=""), width = 1024, height = 768)
#Create the plot
barplot( head(dfrMortalityCases$RESULTADO_DIFSUM7D,-daysToIgnore),
names.arg=head(dfrMortalityCases [, c(campo)],-daysToIgnore),
main=paste("Nuevas Defunciones esta semana vs semana anterior",ProvinceTxt,day_1,"a",maxDate),
las=2,
col = colores)
dev.off()
}
#############################################
#Generate Mortality Graphs
#############################################
generateGraphsForMortality <-function(dfrConfirmedCases,imovingAverageDays ,strProvincename, strFilename) {
generateMortalityGraph  (dfrConfirmedCases,imovingAverageDays , strProvincename, strFilename)
#next is not very meningful
#generateMortalityWeeklyChangeCurve (dfrConfirmedCases , strProvincename ,imovingAverageDays, imovingAverageDays,strFilename)
}
#######################################
#Generate R0 for all states
#######################################
plotRstates <- function(dfrAllR0, boolsavetoFile, strPathToSave){
names(dfrAllR0) <- c("Entidad","Dia","R0")
print(dfrAllR0)
setwd(strPathToSave)
write.csv(dfrAllR0, paste("All","-R0",".csv",sep=""))
png(paste("All","-R0" ,".png",sep=""), width = 1024, height = 768)
# Increase margin size
par(mar=c(12,4,4,4))
colores = ifelse( dfrAllR0[order(-dfrAllR0$R0),3]  > 1 ,rgb(0.2,0.4,0.6,0.6), "#69b3a2")
xx <-  barplot(dfrAllR0[order(-dfrAllR0$R0),3], names.arg=dfrAllR0[order(-dfrAllR0$R0),1],main="ValoresR" ,las=2,
col=colores)
## Add text at top of bars
text(x = xx, y = dfrAllR0[order(-dfrAllR0$R0),3], label = round(dfrAllR0[order(-dfrAllR0$R0),3], digits=2),
pos = 1, cex = 0.5, col = "red")
dev.off()
}
#############################################
#Calculate R Estimation and Plot
#############################################
generateRandPlot<- function(dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion){
#######################
#Restimate
######################
R_estimate <- estimate_R(head(dfrCasesDataFrame$RESULTADO_LAB,-daysToIgnore) ,method = "parametric_si",
config = make_config(list(
mean_si = 3.9, std_si = 4.5)))
day_1 <- dfrCasesDataFrame[1,"FECHA_INGRESO"]
maxRow <- length(R_estimate$R$`Mean(R)`)
maxDate <- R_estimate$R$t_end[maxRow]
latestdayinR0Estimation<- dfrCasesDataFrame[maxDate,"FECHA_INGRESO"]
latestR0Value <- R_estimate$R$`Mean(R)`[maxRow]
#	 plot Restimates
setwd(strPathToSave)
write.csv(R_estimate$R, paste(ProvinceTxt,"-R Estimate",".csv",sep=""))
png(paste(ProvinceTxt,"-R Estimate", ".png",sep=""), width = 1024, height = 768)
plot(R_estimate,
options_I = list(col ="#0066cc",  ylab = "Incidencia"),
options_R = list( xlab =paste(ProvinceTxt," Del",day_1, "al",latestdayinR0Estimation, "Rt:",latestR0Value ), ylab = "R"))
dev.off()
df <- data.frame(ProvinceTxt,latestdayinR0Estimation, latestR0Value)
colnames(df) <- c("Entidad","Dia","R0")
return (df)
}
##############################################
#Calculate running sums for cases
##############################################
aggregateCases <- function(dfrCasesDataFrame,daysToAverage ){
dfrCasesDataFrame <- aggregate(formula = RESULTADO_LAB ~ FECHA_INGRESO , FUN = sum, data = dfrCasesDataFrame)
#add running sum
dfrCasesDataFrame[,"RESULTADO_ACUM"]           <- cumsum(dfrCasesDataFrame$RESULTADO_LAB)
dfrCasesDataFrame[,"RESULTADO_average7D"]      <- aux_averageforNDays(dfrCasesDataFrame, daysToAverage ,"RESULTADO_LAB")
dfrCasesDataFrame[,"RESULTADO_averageACUM7D"]  <- aux_averageforNDays(dfrCasesDataFrame, daysToAverage ,"RESULTADO_ACUM")
dfrCasesDataFrame[,"RESULTADO_SUM7D"]          <- aux_sumForNDays (dfrCasesDataFrame, daysToAverage ,"RESULTADO_LAB")
dfrCasesDataFrame[,"RESULTADO_DIFSUM7D"]       <- aux_differenceBetweenTodayandaNDaysAverage (dfrCasesDataFrame, daysToAverage ,"RESULTADO_SUM7D")
return (dfrCasesDataFrame)
}
##############################################
#Calculate running sum for Mortality Cases
#############################################
aggregateMortalityCases <- function(dfrCasesDataFrame,daysToAverage ){
#set all results to 1 , because we are adding all by FECHA_DEF
dfrCasesDataFrame[,"RESULTADO_LAB"] = 1
dfrCasesDataFrame <- aggregate(formula = RESULTADO_LAB ~ FECHA_DEF , FUN = sum, data = dfrCasesDataFrame)
#add running sum
dfrCasesDataFrame[,"RESULTADO_ACUM"]           <- cumsum(dfrCasesDataFrame$RESULTADO_LAB)
dfrCasesDataFrame[,"RESULTADO_average7D"]      <- aux_averageforNDays(dfrCasesDataFrame, daysToAverage ,"RESULTADO_LAB")
dfrCasesDataFrame[,"RESULTADO_averageACUM7D"]  <- aux_averageforNDays(dfrCasesDataFrame, daysToAverage ,"RESULTADO_ACUM")
dfrCasesDataFrame[,"RESULTADO_SUM7D"]          <- aux_sumForNDays (dfrCasesDataFrame, daysToAverage ,"RESULTADO_LAB")
dfrCasesDataFrame[,"RESULTADO_DIFSUM7D"]       <- aux_differenceBetweenTodayandaNDaysAverage (dfrCasesDataFrame, daysToAverage ,"RESULTADO_SUM7D")
return (dfrCasesDataFrame)
}
#######################################
# Start here
#######################################
#download and load into dataframe
setwd(mydir)
if (TRUE) {
download.file(strUrl, strFilename )
unzipfile <- unzip (strFilename, list = TRUE)
unzip (strFilename, unzipfile$Name)
dfrConfirmedCases <- read.csv ( file=unzipfile$Name)
} else {
dfrConfirmedCases <- read.csv ("./201008COVID19MEXICO.csv")
}
#fill state names
vecListaEstados <- c(1:32)
vecnombreEstados <-c ("AGUASCALIENTES","BAJA_CALIFORNIA","BAJA_CALIFORNIA_SUR","CAMPECHE",	"COAHUILA",	"COLIMA","CHIAPAS",	"CHIHUAHUA","CDMX",	"DURANGO","GUANAJUATO",	"GUERRERO",	"HIDALGO","JALISCO","ESTADO_DE_MEXICO","MICHOACAN","MORELOS","NAYARIT","NUEVO_LEON","OAXACA","PUEBLA","QUERETARO","QUINTANA_ROO","SAN_LUIS_POTOSI","SINALOA","SONORA","TABASCO","TAMAULIPAS","TLAXCALA","VERACRUZ","YUCATAN","ZACATECAS")
vecpoblacionEstados <-c(1184996,3155070,637026,822441,2748391,650555,4796580,3406465,8851080,1632934,5486372,3388768,2665018,7350682,15175862,4351037,1777227,1084979,4653458,3801962,5779829,1827937,1325578,2585518,2767761,2662480,2238603,3268554,1169936,7643194,1955577,1490668)
#######################################
#countrycases
#######################################
#Keep only confirmed case
dfrConfirmedCases <- dfrConfirmedCases [ dfrConfirmedCases$RESULTADO_LAB == strConfirmedResult,c("FECHA_INGRESO","RESULTADO_LAB","ENTIDAD_RES","MUNICIPIO_RES","FECHA_DEF")]
dfrMortalityCases <- dfrConfirmedCases [ dfrConfirmedCases$FECHA_DEF != notDead,c("FECHA_INGRESO","RESULTADO_LAB","ENTIDAD_RES","MUNICIPIO_RES","FECHA_DEF")]
dfrConfirmedCaseswithAgregations  <-aggregateCases (dfrConfirmedCases,imovingAverageDays )
generateGraphsForCases    (dfrConfirmedCaseswithAgregations , "Mexico", idaysForGraphToCutOff , imovingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg",130000000)
dfrR0<- generateRandPlot  (dfrConfirmedCaseswithAgregations , "Mexico", idaysForGraphToCutOff , imovingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg",130000000)
dfrAllR0<-rbind(dfrAllR0,dfrR0)
generateGraphsForMortality (dfrMortalityCases,imovingAverageDays , "Mexico", paste("Mexico","-Mortality",sep=""))
dfrProblacion <- read.csv(paste('./pob/pobmunMX2020.csv', sep=""))
dfrProblacion <- read.csv("./pob/pobmunMX2020.csv")
strPathToSave<- paste(mydir,"/pob",sep="")
dfrProblacion <- read.csv("./pobmunMX2020.csv")
dfrProblacion <- read.csv("pobmunMX2020.csv")
strPathToSave<- paste(mydir)
print(mydir)
strPathToSave<- paste(mydir,"/pob",sep="")
print(mydir)
strPathToSave<- paste(mydir,"/pob",sep="")
setwd(strPathToSave)
dfrProblacion <- read.csv("pobmunMX2020.csv")
dfrProblacion [,]
dfrProblacion [,c('poblacion')]
sum(dfrProblacion [,c('poblacion')])
peunt(mydir)
print(mydir)
setwd(mydir)
setwd(mydir)
strPathToSave<- paste(mydir,"/pob",sep="")
setwd(strPathToSave)
dfrProblacion <- read.csv("pobmunMX2020.csv")
dfrProblacion [,c('poblacion')]
setwd(mydir)
strPathToSave<- paste(mydir,"/pob",sep="")
setwd(strPathToSave)
dfrProblacion <- read.csv("pobmunMX2020.csv")
setwd(mydir)
poblacion <- dfrProblacion [,c('poblacion')]
generateEpidemicCurve <- function(dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion){
campo="FECHA_INGRESO"
print(paste("Calculating ->",ProvinceTxt))
print(   poblacion)
day_1 <- dfrCasesDataFrame[1,c(campo)]
maxRow <- length(dfrCasesDataFrame[,c(campo)])
maxDate <-dfrCasesDataFrame[maxRow-daysToIgnore,c(campo)]
write.csv(dfrCasesDataFrame,paste(ProvinceTxt,strFilename,".csv", sep=""))
#EpidemicCurve Name
png(paste(ProvinceTxt, "-Casos",strFilename ,".png", sep=""), width = 1024, height = 768)
#Create the plot
barplot( head(dfrCasesDataFrame$RESULTADO_LAB,-daysToIgnore),
names.arg=head(dfrCasesDataFrame[,c(campo)],-daysToIgnore),
main=paste("Nuevos Ingresos",ProvinceTxt,day_1,"a",maxDate),
las=2,
col ="#0066cc")
dev.off()
}
poblacion <- dfrProblacion [,c('poblacion')]
dfrConfirmedCases <- dfrConfirmedCases [ dfrConfirmedCases$RESULTADO_LAB == strConfirmedResult,c("FECHA_INGRESO","RESULTADO_LAB","ENTIDAD_RES","MUNICIPIO_RES","FECHA_DEF")]
dfrMortalityCases <- dfrConfirmedCases [ dfrConfirmedCases$FECHA_DEF != notDead,c("FECHA_INGRESO","RESULTADO_LAB","ENTIDAD_RES","MUNICIPIO_RES","FECHA_DEF")]
dfrConfirmedCaseswithAgregations  <-aggregateCases (dfrConfirmedCases,imovingAverageDays )
generateGraphsForCases    (dfrConfirmedCaseswithAgregations , "Mexico", idaysForGraphToCutOff , imovingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg",poblacion)
poblacion <- sum(dfrProblacion [,c('poblacion')])
generateGraphsForCases    (dfrConfirmedCaseswithAgregations , "Mexico", idaysForGraphToCutOff , imovingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg",poblacion)
generateEpidemicCurve <- function(dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion){
campo="FECHA_INGRESO"
print(paste("Calculating ->",ProvinceTxt))
dfrCasesDataFrame[,"POB"] <- poblacion
day_1 <- dfrCasesDataFrame[1,c(campo)]
maxRow <- length(dfrCasesDataFrame[,c(campo)])
maxDate <-dfrCasesDataFrame[maxRow-daysToIgnore,c(campo)]
write.csv(dfrCasesDataFrame,paste(ProvinceTxt,strFilename,".csv", sep=""))
#EpidemicCurve Name
png(paste(ProvinceTxt, "-Casos",strFilename ,".png", sep=""), width = 1024, height = 768)
#Create the plot
barplot( head(dfrCasesDataFrame$RESULTADO_LAB,-daysToIgnore),
names.arg=head(dfrCasesDataFrame[,c(campo)],-daysToIgnore),
main=paste("Nuevos Ingresos",ProvinceTxt,day_1,"a",maxDate),
las=2,
col ="#0066cc")
dev.off()
}
generateGraphsForCases    (dfrConfirmedCaseswithAgregations , "Mexico", idaysForGraphToCutOff , imovingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg",poblacion)
enerateEpidemicCurve <- function(dfrCasesDataFrame , ProvinceTxt,daysToIgnore, daysToAverage, boolsavetoFile,strPathToSave,strFilename,poblacion){
campo="FECHA_INGRESO"
print(paste("Calculating ->",ProvinceTxt))
dfrCasesDataFrame[,"POB"] <- poblacion/100000
day_1 <- dfrCasesDataFrame[1,c(campo)]
maxRow <- length(dfrCasesDataFrame[,c(campo)])
maxDate <-dfrCasesDataFrame[maxRow-daysToIgnore,c(campo)]
write.csv(dfrCasesDataFrame,paste(ProvinceTxt,strFilename,".csv", sep=""))
#EpidemicCurve Name
png(paste(ProvinceTxt, "-Casos",strFilename ,".png", sep=""), width = 1024, height = 768)
#Create the plot
barplot( head(dfrCasesDataFrame$RESULTADO_LAB,-daysToIgnore),
names.arg=head(dfrCasesDataFrame[,c(campo)],-daysToIgnore),
main=paste("Nuevos Ingresos",ProvinceTxt,day_1,"a",maxDate),
las=2,
col ="#0066cc")
dev.off()
}
generateGraphsForCases    (dfrConfirmedCaseswithAgregations , "Mexico", idaysForGraphToCutOff , imovingAverageDays, TRUE, paste(mydir,"/img",sep=""),"-Confirmed-New-cases-Acum-7daysAvg",poblacion)
